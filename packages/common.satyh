@require: hdecoset
@require: vdecoset
@require: azmath/azmath
% TODO: import this package breaks enumitem
% @require: base/list-ext
@require: base/fn
@require: enumitem/enumitem
@require: figbox/figbox
@require: uline/uline
@import: stdjareport

% indirect imports
@import: charts
@import: enumitem-ext
@import: math-operators
@import: math-symbols
@import: physics

let-inline ctx \fig-center fb =
  let bt = '<+fig-center(fb);> in
  let ib-block = embed-block-breakable ctx (read-block ctx bt) in
  inline-fil ++ ib-block ++ omit-skip-after

let-inline ctx \simple-frame it =
  let p = 3pt in
  let pads = (p, p, p, p) in
  let decos = HDecoSet.simple-frame-stroke 1pt (Gray(0.5)) in
    inline-frame-breakable pads decos (read-inline ctx it)
let-inline \answer-i x = {\simple-frame{#x;}}
let-math \answer x = ${\text!{\answer-i{${#x}}}}

let-math \pvec x = ${\pmatrix!(1)!(x)}
let-math \mat2 x = ${\pmatrix!(2)!(x)}

let no-pads = (0pt, 0pt, 0pt, 0pt)

let-block ctx +problem a =
  let ib-title =
    let ctx = StdJaReport.make-section-title ctx in
      read-inline ctx {第#a;問}
  in
  let bb-title =
    let section-heading ctx ib-heading =
      let section-top-margin = 20pt in
      let section-bottom-margin = 12pt in
        line-break true false
          (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
            ib-heading
    in
    let ib =
      inline-frame-breakable no-pads VDecoSet.empty (ib-title ++ inline-fil)
    in
      section-heading ctx ib
  in
    bb-title

let-block ctx +physics-heading x =
  let it = {物理学#x;} in
  let p = 2pt in
  let pads = (p, p, p, p) in
  let decos = HDecoSet.simple-frame-stroke 1pt (Color.black) in
  let ib = 
    let ctx = StdJaReport.make-chapter-title ctx in
      inline-frame-breakable pads decos (read-inline ctx it)
  in
  let ctx = ctx
    |> set-paragraph-margin 30pt 18pt
  in
  line-break true false ctx (ib ++ inline-fil)
let-block +physics1 = '<+physics-heading{I}>
let-block +physics2 = '<+physics-heading{II}>

let intersperse s xs =
  match xs with
  | [] -> []
  | (x :: xs) ->
    x :: List.concat (xs |> List.map (fun x -> [s; x]))

let bracket-nested idx ctx =
  let idx-str = idx
    |> List.map arabic
    |> intersperse `.`
    |> List.fold-left (Fn.flip (^)) ` `
    |> embed-string
  in
  read-inline ctx {[#idx-str;]\ }

let-block +enumerate x = '<
  +enumerate?:(
    Enumitem.(change-by-depth [bracket-arabic; bracket-nested])
  )(x);
>

let-inline \peqref x = {問題文中式(#x;)}
let-inline \eqref x = {式 (\ref(`eq:` ^ x);)}

% Resolve name collision
let-math \underbrace x = ${\AZMathParens.underbrace{#x}}
